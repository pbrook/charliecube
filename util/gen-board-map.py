#! /usr/bin/env python3
import sys
import optparse

def fn(c):
    return ord(c.lower()) - ord('a')

def file_line(f):
    while True:
        l = f.readline()
        if l == "":
            raise EOFError();
        l = l.strip()
        if l == "":
            sys.stdout.write("\n")
            continue
        if l[0] == '#':
            continue
        yield l

op = optparse.OptionParser()
op.add_option("--rgb", action="store_true", dest="rgb", default=False)
(options, args) = op.parse_args();
rgb = options.rgb

sys.stdout.write("/* Generated by gen-board-map.py */\n")

lines = file_line(sys.stdin)

l = next(lines)
common = "AK".index(l[0])
fn = l[1:].index

while True:
    try:
        l1 = next(lines)
        if rgb:
            l2 = next(lines)
            l3 = next(lines)

        # Group into anode/cathode pairs
        x = list(zip(*[iter(map(fn, l1.split()))]*2))
        if rgb:
            y = map(fn, l2.split())
            z = map(fn, l3.split())
        else:
            y = [None]*len(x)
            z = y
        for ((r, k), g, b) in zip(x, y, z):
            if common == 0:
                # Common anode
                sys.stdout.write("PIXEL(%d,%d)," % (k, r))
                if rgb:
                    sys.stdout.write("PIXEL(%d,%d)," % (k, g))
                    sys.stdout.write("PIXEL(%d,%d),\n" % (k, b))
            else:
                # Common cathode
                sys.stdout.write("PIXEL(%d,%d)," % (r, k))
                if rgb:
                    sys.stdout.write("PIXEL(%d,%d)," % (g, k))
                    sys.stdout.write("PIXEL(%d,%d),\n" % (b, k))
    except EOFError:
        break;
    sys.stdout.write("\n")
